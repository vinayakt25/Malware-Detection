# -*- coding: utf-8 -*-
"""Malware_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-23UMzR2baUBGbN4QP1l9r1oNbuJyWCm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import csv

malData=pd.read_csv("/content/MalwareData.csv.gz", sep="|", low_memory=True )

malData.head()

malData.shape

malData.describe()

legit=malData[0:41323].drop(["legitimate"], axis=1)
mal=malData[41323::].drop(["legitimate"],axis=1)
print("The shape of the legit dataset is: %s samples, %s features"%(legit.shape[0],legit.shape[1]))
print("The shape of the mal dataset is: %s samples, %s features"%(mal.shape[0],mal.shape[1]))

fig = plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.hist(malData['legitimate'],20)
plt.show()

""" **Data Cleaning**"""

y=malData['legitimate']
malData=malData.drop(['legitimate'],axis=1)

malData=malData.drop(['Name'],axis=1)
malData=malData.drop(['md5'],axis=1)
print("The name and md5 variables are removed successfully")

# from sklearn.feature_selection import selectKBest
# from sklearn.feature_selection import chi2
# X_new = SelectKBest(chi, k=2).fit_transform(malData, y)
# X_new.shape

"""**Spliting the dataset into test and train**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(malData,y, test_size=0.2,random_state=42)

X_train.shape

"""**Model Building**


1- Random Forest
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
clf = RandomForestClassifier(max_depth=2, random_state=0)
randomModel=clf.fit(X_train, y_train)

"""Evaluation"""

from sklearn.metrics import f1_score,accuracy_score,plot_confusion_matrix,auc,confusion_matrix

# accuracy on train dataset
train_pred=randomModel.predict(X_train)
accuracy_score(y_train,train_pred)

# accuracy on test dataset
prediction=randomModel.predict(X_test)
accuracy_score(y_test,prediction)

f1_score(y_test, prediction)

titles_option = [("\nConfusion matrix,without normalisation", None),("\nNormalised confusion matrix", 'true')]
for title,normalize in titles_option:
  disp = plot_confusion_matrix(randomModel,X_test,y_test,display_labels='legitimate',cmap=plt.cm.Blues,normalize=normalize)
  disp.ax_.set_title(title)
  print(title)
  print(disp.confusion_matrix)
  plt.show

"""2- Logistic regression"""

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0)
logModel=clf.fit(X_train,y_train)

"""Evaluation"""

# accuracy on train dataset
train_log=logModel.predict(X_train)
accuracy_score(y_train,train_log)

# accuracy on test dataset
pred=logModel.predict(X_test)
accuracy_score(y_test,pred)

f1_score(y_test,pred)

"""confusion matrix"""

titles_option = [("\nConfusion matrix,without normalisation", None),("\nNormalised confusion matrix", 'true')]
for title,normalize in titles_option:
  disp = plot_confusion_matrix(logModel,X_test,y_test,display_labels='legitimate',cmap=plt.cm.Blues,normalize=normalize)
  disp.ax_.set_title(title)
  print(title)
  print(disp.confusion_matrix)
  plt.show